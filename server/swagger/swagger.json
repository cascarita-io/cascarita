{
  "openapi": "3.0.0",
  "info": {
    "title": "Cascarita APIs",
    "version": "1.0.0",
    "description": "Backend Cascartia APIs"
  },
  "paths": {
    "/api/users": {
      "get": {
        "operationId": "fetch_user",
        "summary": "Fetch User",
        "description": "Get user details from email. Note will require authorization bearer token set.",
        "parameters": [
          {
            "in": "query",
            "name": "email",
            "required": true,
            "schema": {
              "title": "email",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSchema"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserNotFoundSchema"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageSchema"
                }
              }
            }
          }
        },
        "tags": ["Users"],
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "operationId": "register_user",
        "summary": "Register User Manually",
        "description": "Register a user manually by specifying key attributes like first_name, email, group_id, and language_id. Note, password still needs to set up on Auth0 end.",
        "parameters": [],
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSchema"
                }
              }
            }
          },
          "400": {
            "description": "User already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageSchema"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageSchema"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterUserSchema"
              }
            }
          },
          "required": true
        },
        "tags": ["Users"]
      }
    },
    "/api/users/{user_id}": {
      "get": {
        "operationId": "get_users_by_user_id",
        "summary": "Get users by user ID",
        "description": "Get users by user ID.",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "title": "user_id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSchema"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageSchema"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageSchema"
                }
              }
            }
          }
        },
        "tags": ["Users"]
      },
      "post": {
        "operationId": "update_users_by_user_id",
        "summary": "Update users by user ID",
        "description": "Update users by user ID.",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "title": "user_id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSchema"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageSchema"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageSchema"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserSchema"
              }
            }
          },
          "required": true
        },
        "tags": ["Users"]
      },
      "delete": {
        "operationId": "delete_users_by_user_id",
        "summary": "Delete users by user ID",
        "description": "Delete users by user ID.",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "title": "user_id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageSchema"
                }
              }
            }
          },
          "500": {
            "description": "Failure to delete user (or other internal server error)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageSchema"
                }
              }
            }
          }
        },
        "tags": ["Users"]
      }
    },
    "/api/users/groups/{group_id}": {
      "get": {
        "operationId": "fetch_users_by_group_id",
        "summary": "Fetch Users by Group ID",
        "description": "Get users by group ID.",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "title": "group_id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSchema"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Group not found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageSchema"
                }
              }
            }
          }
        },
        "tags": ["Users"]
      },
      "post": {
        "operationId": "register_user_auth0",
        "summary": "Register User from Auth0",
        "description": "Register a new user from auth0 token. The authorization bearer token will be used to set attributes like first_name, last_name, email, picture, language_id (defaults to English) within our database.",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "title": "group_id",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User created (OK)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSchema"
                }
              }
            }
          },
          "400": {
            "description": "User already present!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageSchema"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessageSchema"
                }
              }
            }
          }
        },
        "tags": ["Users"],
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "UserSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string"
          },
          "group_id": {
            "type": "integer"
          },
          "language_id": {
            "type": "integer"
          },
          "picture": {
            "type": "string",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "UserNotFoundSchema": {
        "type": "object",
        "properties": {
          "message": {
            "type": "integer"
          },
          "isSigningUp": {
            "type": "boolean"
          }
        }
      },
      "UpdateUserSchema": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "nullable": true
          },
          "last_name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "group_id": {
            "type": "integer"
          },
          "language_id": {
            "type": "integer"
          },
          "picture": {
            "type": "string",
            "format": "url",
            "nullable": true
          }
        },
        "required": []
      },
      "RegisterUserSchema": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "group_id": {
            "type": "integer"
          },
          "language_id": {
            "type": "integer"
          },
          "picture": {
            "type": "string",
            "format": "url",
            "nullable": true
          }
        },
        "required": ["first_name", "email", "group_id", "language_id"]
      },
      "ErrorMessageSchema": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "servers": null
}
